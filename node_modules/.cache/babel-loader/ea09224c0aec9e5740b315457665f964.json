{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      },\n\n      /* Avoid double tap issue on iOS */\n      '@media (pointer: fine)': {\n        '&:hover $clearIndicatorDirty': {\n          visibility: 'visible'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4\n      },\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '2px 4px 3px'\n        },\n        '& $input:first-child': {\n          padding: '1px 0 4px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '7.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        '& $input': {\n          padding: '2.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '7px 4px'\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '2.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2\n    },\n\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'auto',\n      margin: '4px 0'\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0',\n      maxHeight: '40vh',\n      overflow: 'auto'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0,\n      '& $option': {\n        paddingLeft: 24\n      }\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnBlur = props.clearOnBlur,\n      clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$getLimitTagsTe = props.getLimitTagsText,\n      getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {\n    return \"+\".concat(more);\n  } : _props$getLimitTagsTe,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (option) {\n    var _option$label;\n\n    return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      _props$handleHomeEndK = props.handleHomeEndKeys,\n      handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$limitTags = props.limitTags,\n      limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onHighlightChange = props.onHighlightChange,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      options = props.options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  })),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    var more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: params.key\n    }, /*#__PURE__*/React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n\n  var defaultRenderOption = function defaultRenderOption(props2, option) {\n    return /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n  };\n\n  var renderOption = renderOptionProp || defaultRenderOption;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    });\n  };\n\n  var hasClearIcon = !disableClearable && !disabled;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the input's text will be cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   * @default <CloseIcon fontSize=\"small\" />\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   * @default false\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["/Users/zainaaban/Documents/Northeastern/nf20/CS4550/cs4550-f20-client-react-aaban/node_modules/@material-ui/core/esm/Autocomplete/Autocomplete.js"],"names":["_objectWithoutProperties","_defineProperty","_extends","React","PropTypes","clsx","withStyles","Popper","ListSubheader","Paper","IconButton","Chip","CloseIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","_option","root","visibility","fullWidth","width","focused","tag","margin","maxWidth","tagSizeSmall","hasPopupIcon","hasClearIcon","inputRoot","flexWrap","paddingRight","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","input","flexGrow","textOverflow","opacity","inputFocused","endAdornment","position","top","clearIndicator","marginRight","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","transform","popper","zIndex","modal","popperDisablePortal","paper","typography","body1","overflow","listbox","listStyle","maxHeight","loading","color","palette","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","selected","hover","disabledOpacity","pointerEvents","groupLabel","background","groupUl","DisablePortal","props","anchorEl","open","other","createElement","_ref","fontSize","_ref2","Autocomplete","forwardRef","ref","_props$autoComplete","autoComplete","_props$autoHighlight","autoHighlight","_props$autoSelect","autoSelect","_props$blurOnSelect","blurOnSelect","ChipProps","classes","className","_props$clearOnBlur","clearOnBlur","freeSolo","_props$clearOnEscape","clearOnEscape","_props$clearText","clearText","_props$closeIcon","closeIcon","_props$closeText","closeText","_props$debug","debug","_props$defaultValue","defaultValue","multiple","_props$disableClearab","disableClearable","_props$disableCloseOn","disableCloseOnSelect","_props$disabled","disabled","_props$disabledItemsF","disabledItemsFocusable","_props$disableListWra","disableListWrap","_props$disablePortal","disablePortal","filterOptions","_props$filterSelected","filterSelectedOptions","_props$forcePopupIcon","forcePopupIcon","_props$freeSolo","_props$fullWidth","_props$getLimitTagsTe","getLimitTagsText","more","concat","getOptionDisabled","_props$getOptionLabel","getOptionLabel","_option$label","label","getOptionSelected","groupBy","_props$handleHomeEndK","handleHomeEndKeys","idProp","id","_props$includeInputIn","includeInputInList","inputValueProp","inputValue","_props$limitTags","limitTags","_props$ListboxCompone","ListboxComponent","ListboxProps","_props$loading","_props$loadingText","loadingText","_props$multiple","_props$noOptionsText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","_props$openOnFocus","openOnFocus","_props$openText","openText","options","_props$PaperComponent","PaperComponent","_props$PopperComponen","PopperComponent","PopperComponentProp","_props$popupIcon","popupIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","_props$selectOnFocus","selectOnFocus","_props$size","size","valueProp","value","_useAutocomplete","componentName","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","popupOpen","focusedTag","setAnchorEl","groupedOptions","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","key","defaultRenderGroup","component","group","children","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","style","clientWidth","role","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","func","number","elementType","array","isRequired","name"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,oDAArC;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,oBAArD;AACA,SAASA,mBAAT;AACA,OAAO,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACzC,MAAIC,OAAJ;;AAEA,SAAO;AACL;AACAC,IAAAA,IAAI,EAAE;AACJ,wCAAkC;AAChCC,QAAAA,UAAU,EAAE;AADoB,OAD9B;;AAKJ;AACA,gCAA0B;AACxB,wCAAgC;AAC9BA,UAAAA,UAAU,EAAE;AADkB;AADR;AANtB,KAFD;;AAeL;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE,KAhBN;;AAoBL;AACAC,IAAAA,OAAO,EAAE,EArBJ;;AAuBL;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAE,CADL;AAEHC,MAAAA,QAAQ,EAAE;AAFP,KAxBA;;AA6BL;AACAC,IAAAA,YAAY,EAAE;AACZF,MAAAA,MAAM,EAAE,CADI;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KA9BT;;AAmCL;AACAE,IAAAA,YAAY,EAAE,EApCT;;AAsCL;AACAC,IAAAA,YAAY,EAAE,EAvCT;;AAyCL;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,MADD;AAET,0CAAoC;AAClCC,QAAAA,YAAY,EAAE,KAAK;AADe,OAF3B;AAKT,sCAAgC;AAC9BA,QAAAA,YAAY,EAAE,KAAK;AADW,OALvB;AAQT,kBAAY;AACVV,QAAAA,KAAK,EAAE,CADG;AAEVW,QAAAA,QAAQ,EAAE;AAFA,OARH;AAYT,mCAA6B;AAC3BC,QAAAA,aAAa,EAAE,CADY;AAE3B,oBAAY;AACVC,UAAAA,OAAO,EAAE;AADC,SAFe;AAK3B,gCAAwB;AACtBA,UAAAA,OAAO,EAAE;AADa;AALG,OAZpB;AAqBT,kEAA4D;AAC1D,oBAAY;AACVA,UAAAA,OAAO,EAAE;AADC,SAD8C;AAI1D,gCAAwB;AACtBA,UAAAA,OAAO,EAAE;AADa;AAJkC,OArBnD;AA6BT,2CAAqC;AACnCA,QAAAA,OAAO,EAAE,CAD0B;AAEnC,4CAAoC;AAClCH,UAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADW,SAFD;AAKnC,wCAAgC;AAC9BA,UAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADO,SALG;AAQnC,oBAAY;AACVG,UAAAA,OAAO,EAAE;AADC,SARuB;AAWnC,gCAAwB;AACtBC,UAAAA,WAAW,EAAE;AADS,SAXW;AAcnC,2BAAmB;AACjBC,UAAAA,KAAK,EAAE;AADU;AAdgB,OA7B5B;AA+CT,kFAA4E;AAC1EF,QAAAA,OAAO,EAAE,CADiE;AAE1E,oBAAY;AACVA,UAAAA,OAAO,EAAE;AADC;AAF8D,OA/CnE;AAqDT,yCAAmC;AACjCG,QAAAA,UAAU,EAAE,EADqB;AAEjCF,QAAAA,WAAW,EAAE,CAFoB;AAGjC,4CAAoC;AAClCJ,UAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADW,SAHH;AAMjC,wCAAgC;AAC9BA,UAAAA,YAAY,EAAE,KAAK,CAAL,GAAS;AADO,SANC;AASjC,oBAAY;AACVG,UAAAA,OAAO,EAAE;AADC,SATqB;AAYjC,2BAAmB;AACjBE,UAAAA,KAAK,EAAE;AADU;AAZc,OArD1B;AAqET,8EAAwE;AACtEH,QAAAA,aAAa,EAAE,CADuD;AAEtE,oBAAY;AACVC,UAAAA,OAAO,EAAE;AADC;AAF0D;AArE/D,KA1CN;;AAuHL;AACAI,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,CADL;AAELC,MAAAA,YAAY,EAAE,UAFT;AAGLC,MAAAA,OAAO,EAAE;AAHJ,KAxHF;;AA8HL;AACAC,IAAAA,YAAY,EAAE;AACZD,MAAAA,OAAO,EAAE;AADG,KA/HT;;AAmIL;AACAE,IAAAA,YAAY,EAAE;AACZ;AACAC,MAAAA,QAAQ,EAAE,UAFE;AAGZR,MAAAA,KAAK,EAAE,CAHK;AAIZS,MAAAA,GAAG,EAAE,kBAJO,CAIY;;AAJZ,KApIT;;AA4IL;AACAC,IAAAA,cAAc,EAAE;AACdC,MAAAA,WAAW,EAAE,CAAC,CADA;AAEdb,MAAAA,OAAO,EAAE,CAFK;AAGdf,MAAAA,UAAU,EAAE;AAHE,KA7IX;;AAmJL;AACA6B,IAAAA,mBAAmB,EAAE,EApJhB;;AAsJL;AACAC,IAAAA,cAAc,EAAE;AACdf,MAAAA,OAAO,EAAE,CADK;AAEda,MAAAA,WAAW,EAAE,CAAC;AAFA,KAvJX;;AA4JL;AACAG,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,SAAS,EAAE;AADO,KA7Jf;;AAiKL;AACAC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAErC,KAAK,CAACqC,MAAN,CAAaC;AADf,KAlKH;;AAsKL;AACAC,IAAAA,mBAAmB,EAAE;AACnBX,MAAAA,QAAQ,EAAE;AADS,KAvKhB;;AA2KL;AACAY,IAAAA,KAAK,EAAEvD,QAAQ,CAAC,EAAD,EAAKe,KAAK,CAACyC,UAAN,CAAiBC,KAAtB,EAA6B;AAC1CC,MAAAA,QAAQ,EAAE,MADgC;AAE1CnC,MAAAA,MAAM,EAAE;AAFkC,KAA7B,CA5KV;;AAiLL;AACAoC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,MADJ;AAEPrC,MAAAA,MAAM,EAAE,CAFD;AAGPU,MAAAA,OAAO,EAAE,OAHF;AAIP4B,MAAAA,SAAS,EAAE,MAJJ;AAKPH,MAAAA,QAAQ,EAAE;AALH,KAlLJ;;AA0LL;AACAI,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAEhD,KAAK,CAACiD,OAAN,CAAcC,IAAd,CAAmBC,SADnB;AAEPjC,MAAAA,OAAO,EAAE;AAFF,KA3LJ;;AAgML;AACAkC,IAAAA,SAAS,EAAE;AACTJ,MAAAA,KAAK,EAAEhD,KAAK,CAACiD,OAAN,CAAcC,IAAd,CAAmBC,SADjB;AAETjC,MAAAA,OAAO,EAAE;AAFA,KAjMN;;AAsML;AACAmC,IAAAA,MAAM,GAAGpD,OAAO,GAAG;AACjBqD,MAAAA,SAAS,EAAE,EADM;AAEjBC,MAAAA,OAAO,EAAE,MAFQ;AAGjBZ,MAAAA,QAAQ,EAAE,QAHO;AAIjBa,MAAAA,cAAc,EAAE,YAJC;AAKjBC,MAAAA,UAAU,EAAE,QALK;AAMjBC,MAAAA,MAAM,EAAE,SANS;AAOjBrC,MAAAA,UAAU,EAAE,CAPK;AAQjBsC,MAAAA,SAAS,EAAE,YARM;AASjBC,MAAAA,OAAO,EAAE,GATQ;AAUjBC,MAAAA,uBAAuB,EAAE,aAVR;AAWjB5C,MAAAA,aAAa,EAAE,CAXE;AAYjBE,MAAAA,WAAW,EAAE,EAZI;AAajBJ,MAAAA,YAAY,EAAE;AAbG,KAAV,EAcN/B,eAAe,CAACiB,OAAD,EAAUD,KAAK,CAAC8D,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAV,EAAsC;AACtDT,MAAAA,SAAS,EAAE;AAD2C,KAAtC,CAdT,EAgBLtE,eAAe,CAACiB,OAAD,EAAU,yBAAV,EAAqC;AACtD+D,MAAAA,eAAe,EAAEhE,KAAK,CAACiD,OAAN,CAAcgB,MAAd,CAAqBC;AADgB,KAArC,CAhBV,EAkBLlF,eAAe,CAACiB,OAAD,EAAU,sBAAV,EAAkC;AACnD+D,MAAAA,eAAe,EAAEhE,KAAK,CAACiD,OAAN,CAAcgB,MAAd,CAAqBE;AADa,KAAlC,CAlBV,EAoBLnF,eAAe,CAACiB,OAAD,EAAU,UAAV,EAAsB;AACvC+D,MAAAA,eAAe,EAAEhE,KAAK,CAACiD,OAAN,CAAcgB,MAAd,CAAqBC;AADC,KAAtB,CApBV,EAsBLlF,eAAe,CAACiB,OAAD,EAAU,yBAAV,EAAqC;AACtDwB,MAAAA,OAAO,EAAEzB,KAAK,CAACiD,OAAN,CAAcgB,MAAd,CAAqBG,eADwB;AAEtDC,MAAAA,aAAa,EAAE;AAFuC,KAArC,CAtBV,EAyBLpE,OAzBE,CAvMD;;AAkOL;AACAqE,IAAAA,UAAU,EAAE;AACVN,MAAAA,eAAe,EAAEhE,KAAK,CAACiD,OAAN,CAAcsB,UAAd,CAAyB/B,KADhC;AAEVX,MAAAA,GAAG,EAAE,CAAC;AAFI,KAnOP;;AAwOL;AACA2C,IAAAA,OAAO,EAAE;AACPtD,MAAAA,OAAO,EAAE,CADF;AAEP,mBAAa;AACXC,QAAAA,WAAW,EAAE;AADF;AAFN;AAzOJ,GAAP;AAgPD,CAnPM;;AAqPP,SAASsD,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B;AACA,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,IAAI,GAAGF,KAAK,CAACE,IADjB;AAAA,MAEIC,KAAK,GAAG9F,wBAAwB,CAAC2F,KAAD,EAAQ,CAAC,UAAD,EAAa,MAAb,CAAR,CAFpC;;AAIA,SAAO,aAAaxF,KAAK,CAAC4F,aAAN,CAAoB,KAApB,EAA2BD,KAA3B,CAApB;AACD;;AAED,IAAIE,IAAI,GAAG,aAAa7F,KAAK,CAAC4F,aAAN,CAAoBnF,SAApB,EAA+B;AACrDqF,EAAAA,QAAQ,EAAE;AAD2C,CAA/B,CAAxB;;AAIA,IAAIC,KAAK,GAAG,aAAa/F,KAAK,CAAC4F,aAAN,CAAoBlF,iBAApB,EAAuC,IAAvC,CAAzB;;AAEA,IAAIsF,YAAY,GAAG,aAAahG,KAAK,CAACiG,UAAN,CAAiB,SAASD,YAAT,CAAsBR,KAAtB,EAA6BU,GAA7B,EAAkC;AACjF;AACA,MAAIC,mBAAmB,GAAGX,KAAK,CAACY,YAAhC;AAAA,MACIA,YAAY,GAAGD,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,KAAjC,GAAyCA,mBAD5D;AAAA,MAEIE,oBAAoB,GAAGb,KAAK,CAACc,aAFjC;AAAA,MAGIA,aAAa,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,KAAlC,GAA0CA,oBAH9D;AAAA,MAIIE,iBAAiB,GAAGf,KAAK,CAACgB,UAJ9B;AAAA,MAKIA,UAAU,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,KAA/B,GAAuCA,iBALxD;AAAA,MAMIE,mBAAmB,GAAGjB,KAAK,CAACkB,YANhC;AAAA,MAOIA,YAAY,GAAGD,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,KAAjC,GAAyCA,mBAP5D;AAAA,MAQIE,SAAS,GAAGnB,KAAK,CAACmB,SARtB;AAAA,MASIC,OAAO,GAAGpB,KAAK,CAACoB,OATpB;AAAA,MAUIC,SAAS,GAAGrB,KAAK,CAACqB,SAVtB;AAAA,MAWIC,kBAAkB,GAAGtB,KAAK,CAACuB,WAX/B;AAAA,MAYIA,WAAW,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,CAACtB,KAAK,CAACwB,QAAvC,GAAkDF,kBAZpE;AAAA,MAaIG,oBAAoB,GAAGzB,KAAK,CAAC0B,aAbjC;AAAA,MAcIA,aAAa,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,KAAlC,GAA0CA,oBAd9D;AAAA,MAeIE,gBAAgB,GAAG3B,KAAK,CAAC4B,SAf7B;AAAA,MAgBIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,OAA9B,GAAwCA,gBAhBxD;AAAA,MAiBIE,gBAAgB,GAAG7B,KAAK,CAAC8B,SAjB7B;AAAA,MAkBIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8BxB,IAA9B,GAAqCwB,gBAlBrD;AAAA,MAmBIE,gBAAgB,GAAG/B,KAAK,CAACgC,SAnB7B;AAAA,MAoBIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,OAA9B,GAAwCA,gBApBxD;AAAA,MAqBIE,YAAY,GAAGjC,KAAK,CAACkC,KArBzB;AAAA,MAsBIA,KAAK,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,KAA1B,GAAkCA,YAtB9C;AAAA,MAuBIE,mBAAmB,GAAGnC,KAAK,CAACoC,YAvBhC;AAAA,MAwBIA,YAAY,GAAGD,mBAAmB,KAAK,KAAK,CAA7B,GAAiCnC,KAAK,CAACqC,QAAN,GAAiB,EAAjB,GAAsB,IAAvD,GAA8DF,mBAxBjF;AAAA,MAyBIG,qBAAqB,GAAGtC,KAAK,CAACuC,gBAzBlC;AAAA,MA0BIA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBA1BlE;AAAA,MA2BIE,qBAAqB,GAAGxC,KAAK,CAACyC,oBA3BlC;AAAA,MA4BIA,oBAAoB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBA5BtE;AAAA,MA6BIE,eAAe,GAAG1C,KAAK,CAAC2C,QA7B5B;AAAA,MA8BIA,QAAQ,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,KAA7B,GAAqCA,eA9BpD;AAAA,MA+BIE,qBAAqB,GAAG5C,KAAK,CAAC6C,sBA/BlC;AAAA,MAgCIA,sBAAsB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAhCxE;AAAA,MAiCIE,qBAAqB,GAAG9C,KAAK,CAAC+C,eAjClC;AAAA,MAkCIA,eAAe,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAlCjE;AAAA,MAmCIE,oBAAoB,GAAGhD,KAAK,CAACiD,aAnCjC;AAAA,MAoCIA,aAAa,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,KAAlC,GAA0CA,oBApC9D;AAAA,MAqCIE,aAAa,GAAGlD,KAAK,CAACkD,aArC1B;AAAA,MAsCIC,qBAAqB,GAAGnD,KAAK,CAACoD,qBAtClC;AAAA,MAuCIA,qBAAqB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAvCvE;AAAA,MAwCIE,qBAAqB,GAAGrD,KAAK,CAACsD,cAxClC;AAAA,MAyCIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,MAAnC,GAA4CA,qBAzCjE;AAAA,MA0CIE,eAAe,GAAGvD,KAAK,CAACwB,QA1C5B;AAAA,MA2CIA,QAAQ,GAAG+B,eAAe,KAAK,KAAK,CAAzB,GAA6B,KAA7B,GAAqCA,eA3CpD;AAAA,MA4CIC,gBAAgB,GAAGxD,KAAK,CAACtE,SA5C7B;AAAA,MA6CIA,SAAS,GAAG8H,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,KAA9B,GAAsCA,gBA7CtD;AAAA,MA8CIC,qBAAqB,GAAGzD,KAAK,CAAC0D,gBA9ClC;AAAA,MA+CIA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,UAAUE,IAAV,EAAgB;AACxE,WAAO,IAAIC,MAAJ,CAAWD,IAAX,CAAP;AACD,GAFsB,GAEnBF,qBAjDJ;AAAA,MAkDII,iBAAiB,GAAG7D,KAAK,CAAC6D,iBAlD9B;AAAA,MAmDIC,qBAAqB,GAAG9D,KAAK,CAAC+D,cAnDlC;AAAA,MAoDIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,UAAUnF,MAAV,EAAkB;AACxE,QAAIqF,aAAJ;;AAEA,WAAO,CAACA,aAAa,GAAGrF,MAAM,CAACsF,KAAxB,MAAmC,IAAnC,IAA2CD,aAAa,KAAK,KAAK,CAAlE,GAAsEA,aAAtE,GAAsFrF,MAA7F;AACD,GAJoB,GAIjBmF,qBAxDJ;AAAA,MAyDII,iBAAiB,GAAGlE,KAAK,CAACkE,iBAzD9B;AAAA,MA0DIC,OAAO,GAAGnE,KAAK,CAACmE,OA1DpB;AAAA,MA2DIC,qBAAqB,GAAGpE,KAAK,CAACqE,iBA3DlC;AAAA,MA4DIA,iBAAiB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,CAACpE,KAAK,CAACwB,QAA1C,GAAqD4C,qBA5D7E;AAAA,MA6DIE,MAAM,GAAGtE,KAAK,CAACuE,EA7DnB;AAAA,MA8DIC,qBAAqB,GAAGxE,KAAK,CAACyE,kBA9DlC;AAAA,MA+DIA,kBAAkB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBA/DpE;AAAA,MAgEIE,cAAc,GAAG1E,KAAK,CAAC2E,UAhE3B;AAAA,MAiEIC,gBAAgB,GAAG5E,KAAK,CAAC6E,SAjE7B;AAAA,MAkEIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,CAAC,CAA/B,GAAmCA,gBAlEnD;AAAA,MAmEIE,qBAAqB,GAAG9E,KAAK,CAAC+E,gBAnElC;AAAA,MAoEIA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBApEjE;AAAA,MAqEIE,YAAY,GAAGhF,KAAK,CAACgF,YArEzB;AAAA,MAsEIC,cAAc,GAAGjF,KAAK,CAAC3B,OAtE3B;AAAA,MAuEIA,OAAO,GAAG4G,cAAc,KAAK,KAAK,CAAxB,GAA4B,KAA5B,GAAoCA,cAvElD;AAAA,MAwEIC,kBAAkB,GAAGlF,KAAK,CAACmF,WAxE/B;AAAA,MAyEIA,WAAW,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,UAAhC,GAA6CA,kBAzE/D;AAAA,MA0EIE,eAAe,GAAGpF,KAAK,CAACqC,QA1E5B;AAAA,MA2EIA,QAAQ,GAAG+C,eAAe,KAAK,KAAK,CAAzB,GAA6B,KAA7B,GAAqCA,eA3EpD;AAAA,MA4EIC,oBAAoB,GAAGrF,KAAK,CAACsF,aA5EjC;AAAA,MA6EIA,aAAa,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,YAAlC,GAAiDA,oBA7ErE;AAAA,MA8EIE,QAAQ,GAAGvF,KAAK,CAACuF,QA9ErB;AAAA,MA+EIC,OAAO,GAAGxF,KAAK,CAACwF,OA/EpB;AAAA,MAgFIC,iBAAiB,GAAGzF,KAAK,CAACyF,iBAhF9B;AAAA,MAiFIC,aAAa,GAAG1F,KAAK,CAAC0F,aAjF1B;AAAA,MAkFIC,MAAM,GAAG3F,KAAK,CAAC2F,MAlFnB;AAAA,MAmFIzF,IAAI,GAAGF,KAAK,CAACE,IAnFjB;AAAA,MAoFI0F,kBAAkB,GAAG5F,KAAK,CAAC6F,WApF/B;AAAA,MAqFIA,WAAW,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,KAAhC,GAAwCA,kBArF1D;AAAA,MAsFIE,eAAe,GAAG9F,KAAK,CAAC+F,QAtF5B;AAAA,MAuFIA,QAAQ,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,MAA7B,GAAsCA,eAvFrD;AAAA,MAwFIE,OAAO,GAAGhG,KAAK,CAACgG,OAxFpB;AAAA,MAyFIC,qBAAqB,GAAGjG,KAAK,CAACkG,cAzFlC;AAAA,MA0FIA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCnL,KAAnC,GAA2CmL,qBA1FhE;AAAA,MA2FIE,qBAAqB,GAAGnG,KAAK,CAACoG,eA3FlC;AAAA,MA4FIC,mBAAmB,GAAGF,qBAAqB,KAAK,KAAK,CAA/B,GAAmCvL,MAAnC,GAA4CuL,qBA5FtE;AAAA,MA6FIG,gBAAgB,GAAGtG,KAAK,CAACuG,SA7F7B;AAAA,MA8FIA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B/F,KAA9B,GAAsC+F,gBA9FtD;AAAA,MA+FIE,eAAe,GAAGxG,KAAK,CAACyG,WA/F5B;AAAA,MAgGIC,WAAW,GAAG1G,KAAK,CAAC0G,WAhGxB;AAAA,MAiGIC,gBAAgB,GAAG3G,KAAK,CAAC4G,YAjG7B;AAAA,MAkGIC,UAAU,GAAG7G,KAAK,CAAC6G,UAlGvB;AAAA,MAmGIC,oBAAoB,GAAG9G,KAAK,CAAC+G,aAnGjC;AAAA,MAoGIA,aAAa,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,CAAC9G,KAAK,CAACwB,QAAzC,GAAoDsF,oBApGxE;AAAA,MAqGIE,WAAW,GAAGhH,KAAK,CAACiH,IArGxB;AAAA,MAsGIA,IAAI,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,QAAzB,GAAoCA,WAtG/C;AAAA,MAuGIE,SAAS,GAAGlH,KAAK,CAACmH,KAvGtB;AAAA,MAwGIhH,KAAK,GAAG9F,wBAAwB,CAAC2F,KAAD,EAAQ,CAAC,cAAD,EAAiB,eAAjB,EAAkC,YAAlC,EAAgD,cAAhD,EAAgE,WAAhE,EAA6E,SAA7E,EAAwF,WAAxF,EAAqG,aAArG,EAAoH,eAApH,EAAqI,WAArI,EAAkJ,WAAlJ,EAA+J,WAA/J,EAA4K,OAA5K,EAAqL,cAArL,EAAqM,kBAArM,EAAyN,sBAAzN,EAAiP,UAAjP,EAA6P,wBAA7P,EAAuR,iBAAvR,EAA0S,eAA1S,EAA2T,eAA3T,EAA4U,uBAA5U,EAAqW,gBAArW,EAAuX,UAAvX,EAAmY,WAAnY,EAAgZ,kBAAhZ,EAAoa,mBAApa,EAAyb,gBAAzb,EAA2c,mBAA3c,EAAge,SAAhe,EAA2e,mBAA3e,EAAggB,IAAhgB,EAAsgB,oBAAtgB,EAA4hB,YAA5hB,EAA0iB,WAA1iB,EAAujB,kBAAvjB,EAA2kB,cAA3kB,EAA2lB,SAA3lB,EAAsmB,aAAtmB,EAAqnB,UAArnB,EAAioB,eAAjoB,EAAkpB,UAAlpB,EAA8pB,SAA9pB,EAAyqB,mBAAzqB,EAA8rB,eAA9rB,EAA+sB,QAA/sB,EAAytB,MAAztB,EAAiuB,aAAjuB,EAAgvB,UAAhvB,EAA4vB,SAA5vB,EAAuwB,gBAAvwB,EAAyxB,iBAAzxB,EAA4yB,WAA5yB,EAAyzB,aAAzzB,EAAw0B,aAAx0B,EAAu1B,cAAv1B,EAAu2B,YAAv2B,EAAq3B,eAAr3B,EAAs4B,MAAt4B,EAA84B,OAA94B,CAAR,CAxGpC;AAyGA;;;AAGA,MAAIoG,eAAe,GAAGnD,aAAa,GAAGlD,aAAH,GAAmBsG,mBAAtD;;AAEA,MAAIe,gBAAgB,GAAGjM,eAAe,CAACZ,QAAQ,CAAC,EAAD,EAAKyF,KAAL,EAAY;AACzDqH,IAAAA,aAAa,EAAE;AAD0C,GAAZ,CAAT,CAAtC;AAAA,MAGIC,YAAY,GAAGF,gBAAgB,CAACE,YAHpC;AAAA,MAIIC,aAAa,GAAGH,gBAAgB,CAACG,aAJrC;AAAA,MAKIC,kBAAkB,GAAGJ,gBAAgB,CAACI,kBAL1C;AAAA,MAMIC,sBAAsB,GAAGL,gBAAgB,CAACK,sBAN9C;AAAA,MAOIC,aAAa,GAAGN,gBAAgB,CAACM,aAPrC;AAAA,MAQIC,WAAW,GAAGP,gBAAgB,CAACO,WARnC;AAAA,MASIC,eAAe,GAAGR,gBAAgB,CAACQ,eATvC;AAAA,MAUIC,cAAc,GAAGT,gBAAgB,CAACS,cAVtC;AAAA,MAWIV,KAAK,GAAGC,gBAAgB,CAACD,KAX7B;AAAA,MAYIW,KAAK,GAAGV,gBAAgB,CAACU,KAZ7B;AAAA,MAaIvD,EAAE,GAAG6C,gBAAgB,CAAC7C,EAb1B;AAAA,MAcIwD,SAAS,GAAGX,gBAAgB,CAACW,SAdjC;AAAA,MAeInM,OAAO,GAAGwL,gBAAgB,CAACxL,OAf/B;AAAA,MAgBIoM,UAAU,GAAGZ,gBAAgB,CAACY,UAhBlC;AAAA,MAiBI/H,QAAQ,GAAGmH,gBAAgB,CAACnH,QAjBhC;AAAA,MAkBIgI,WAAW,GAAGb,gBAAgB,CAACa,WAlBnC;AAAA,MAmBItD,UAAU,GAAGyC,gBAAgB,CAACzC,UAnBlC;AAAA,MAoBIuD,cAAc,GAAGd,gBAAgB,CAACc,cApBtC;;AAsBA,MAAIC,cAAJ;;AAEA,MAAI9F,QAAQ,IAAI8E,KAAK,CAACiB,MAAN,GAAe,CAA/B,EAAkC;AAChC,QAAIC,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,MAA/B,EAAuC;AACjE,aAAO/N,QAAQ,CAAC;AACd8G,QAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAACvF,GAAT,EAAcoL,IAAI,KAAK,OAAT,IAAoB7F,OAAO,CAACpF,YAA1C,CADD;AAEd2G,QAAAA,QAAQ,EAAEA;AAFI,OAAD,EAGZgF,WAAW,CAACW,MAAD,CAHC,CAAf;AAID,KALD;;AAOA,QAAIzB,UAAJ,EAAgB;AACdsB,MAAAA,cAAc,GAAGtB,UAAU,CAACM,KAAD,EAAQkB,qBAAR,CAA3B;AACD,KAFD,MAEO;AACLF,MAAAA,cAAc,GAAGhB,KAAK,CAACoB,GAAN,CAAU,UAAU5J,MAAV,EAAkB6J,KAAlB,EAAyB;AAClD,eAAO,aAAahO,KAAK,CAAC4F,aAAN,CAAoBpF,IAApB,EAA0BT,QAAQ,CAAC;AACrD0J,UAAAA,KAAK,EAAEF,cAAc,CAACpF,MAAD,CADgC;AAErDsI,UAAAA,IAAI,EAAEA;AAF+C,SAAD,EAGnDoB,qBAAqB,CAAC;AACvBG,UAAAA,KAAK,EAAEA;AADgB,SAAD,CAH8B,EAKlDrH,SALkD,CAAlC,CAApB;AAMD,OAPgB,CAAjB;AAQD;AACF;;AAED,MAAI0D,SAAS,GAAG,CAAC,CAAb,IAAkB4D,KAAK,CAACC,OAAN,CAAcP,cAAd,CAAtB,EAAqD;AACnD,QAAIxE,IAAI,GAAGwE,cAAc,CAACC,MAAf,GAAwBvD,SAAnC;;AAEA,QAAI,CAACjJ,OAAD,IAAY+H,IAAI,GAAG,CAAvB,EAA0B;AACxBwE,MAAAA,cAAc,GAAGA,cAAc,CAACQ,MAAf,CAAsB,CAAtB,EAAyB9D,SAAzB,CAAjB;AACAsD,MAAAA,cAAc,CAACS,IAAf,EAAqB,aAAapO,KAAK,CAAC4F,aAAN,CAAoB,MAApB,EAA4B;AAC5DiB,QAAAA,SAAS,EAAED,OAAO,CAACvF,GADyC;AAE5DgN,QAAAA,GAAG,EAAEV,cAAc,CAACC;AAFwC,OAA5B,EAG/B1E,gBAAgB,CAACC,IAAD,CAHe,CAAlC;AAID;AACF;;AAED,MAAImF,kBAAkB,GAAG,SAASA,kBAAT,CAA4BR,MAA5B,EAAoC;AAC3D,WAAO,aAAa9N,KAAK,CAAC4F,aAAN,CAAoB,IAApB,EAA0B;AAC5CyI,MAAAA,GAAG,EAAEP,MAAM,CAACO;AADgC,KAA1B,EAEjB,aAAarO,KAAK,CAAC4F,aAAN,CAAoBvF,aAApB,EAAmC;AACjDwG,MAAAA,SAAS,EAAED,OAAO,CAACxB,UAD8B;AAEjDmJ,MAAAA,SAAS,EAAE;AAFsC,KAAnC,EAGbT,MAAM,CAACU,KAHM,CAFI,EAKF,aAAaxO,KAAK,CAAC4F,aAAN,CAAoB,IAApB,EAA0B;AACvDiB,MAAAA,SAAS,EAAED,OAAO,CAACtB;AADoC,KAA1B,EAE5BwI,MAAM,CAACW,QAFqB,CALX,CAApB;AAQD,GATD;;AAWA,MAAIxC,WAAW,GAAGD,eAAe,IAAIsC,kBAArC;;AAEA,MAAII,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,MAA7B,EAAqCxK,MAArC,EAA6C;AACrE,WAAO,aAAanE,KAAK,CAAC4F,aAAN,CAAoB,IAApB,EAA0B+I,MAA1B,EAAkCpF,cAAc,CAACpF,MAAD,CAAhD,CAApB;AACD,GAFD;;AAIA,MAAIiI,YAAY,GAAGD,gBAAgB,IAAIuC,mBAAvC;;AAEA,MAAIE,gBAAgB,GAAG,SAASA,gBAAT,CAA0BzK,MAA1B,EAAkC6J,KAAlC,EAAyC;AAC9D,QAAIa,WAAW,GAAGxB,cAAc,CAAC;AAC/BlJ,MAAAA,MAAM,EAAEA,MADuB;AAE/B6J,MAAAA,KAAK,EAAEA;AAFwB,KAAD,CAAhC;AAIA,WAAO5B,YAAY,CAACrM,QAAQ,CAAC,EAAD,EAAK8O,WAAL,EAAkB;AAC5ChI,MAAAA,SAAS,EAAED,OAAO,CAACzC;AADyB,KAAlB,CAAT,EAEfA,MAFe,EAEP;AACVa,MAAAA,QAAQ,EAAE6J,WAAW,CAAC,eAAD,CADX;AAEV1E,MAAAA,UAAU,EAAEA;AAFF,KAFO,CAAnB;AAMD,GAXD;;AAaA,MAAIzI,YAAY,GAAG,CAACqG,gBAAD,IAAqB,CAACI,QAAzC;AACA,MAAI1G,YAAY,GAAG,CAAC,CAACuF,QAAD,IAAa8B,cAAc,KAAK,IAAjC,KAA0CA,cAAc,KAAK,KAAhF;AACA,SAAO,aAAa9I,KAAK,CAAC4F,aAAN,CAAoB5F,KAAK,CAAC8O,QAA1B,EAAoC,IAApC,EAA0C,aAAa9O,KAAK,CAAC4F,aAAN,CAAoB,KAApB,EAA2B7F,QAAQ,CAAC;AAC7GmG,IAAAA,GAAG,EAAEA,GADwG;AAE7GW,IAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAAC5F,IAAT,EAAe6F,SAAf,EAA0BzF,OAAO,IAAIwF,OAAO,CAACxF,OAA7C,EAAsDF,SAAS,IAAI0F,OAAO,CAAC1F,SAA3E,EAAsFQ,YAAY,IAAIkF,OAAO,CAAClF,YAA9G,EAA4HD,YAAY,IAAImF,OAAO,CAACnF,YAApJ;AAF8F,GAAD,EAG3GqL,YAAY,CAACnH,KAAD,CAH+F,CAAnC,EAGlDuG,WAAW,CAAC;AACnCnC,IAAAA,EAAE,EAAEA,EAD+B;AAEnC5B,IAAAA,QAAQ,EAAEA,QAFyB;AAGnCjH,IAAAA,SAAS,EAAE,IAHwB;AAInCuL,IAAAA,IAAI,EAAEA,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6BsC,SAJA;AAKnCC,IAAAA,eAAe,EAAEhC,kBAAkB,EALA;AAMnCiC,IAAAA,UAAU,EAAE;AACV/I,MAAAA,GAAG,EAAEuH,WADK;AAEV5G,MAAAA,SAAS,EAAED,OAAO,CAACjF,SAFT;AAGVgM,MAAAA,cAAc,EAAEA,cAHN;AAIVlL,MAAAA,YAAY,EAAE,aAAazC,KAAK,CAAC4F,aAAN,CAAoB,KAApB,EAA2B;AACpDiB,QAAAA,SAAS,EAAED,OAAO,CAACnE;AADiC,OAA3B,EAExBf,YAAY,GAAG,aAAa1B,KAAK,CAAC4F,aAAN,CAAoBrF,UAApB,EAAgCR,QAAQ,CAAC,EAAD,EAAKmN,aAAa,EAAlB,EAAsB;AAC3F,sBAAc9F,SAD6E;AAE3F8H,QAAAA,KAAK,EAAE9H,SAFoF;AAG3FP,QAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAAChE,cAAT,EAAyB0K,KAAK,IAAI1G,OAAO,CAAC9D,mBAA1C;AAH4E,OAAtB,CAAxC,EAI3BwE,SAJ2B,CAAhB,GAIE,IANU,EAMJ7F,YAAY,GAAG,aAAazB,KAAK,CAAC4F,aAAN,CAAoBrF,UAApB,EAAgCR,QAAQ,CAAC,EAAD,EAAKkN,sBAAsB,EAA3B,EAA+B;AACxH9E,QAAAA,QAAQ,EAAEA,QAD8G;AAExH,sBAAcoF,SAAS,GAAG/F,SAAH,GAAe+D,QAFkF;AAGxH2D,QAAAA,KAAK,EAAE3B,SAAS,GAAG/F,SAAH,GAAe+D,QAHyF;AAIxH1E,QAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAAC7D,cAAT,EAAyBwK,SAAS,IAAI3G,OAAO,CAAC5D,kBAA9C;AAJyG,OAA/B,CAAxC,EAK/C+I,SAL+C,CAAhB,GAKlB,IAXU;AAJjB,KANuB;AAuBnCoD,IAAAA,UAAU,EAAEpP,QAAQ,CAAC;AACnB8G,MAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAACxE,KAAT,EAAgBoL,UAAU,KAAK,CAAC,CAAhB,IAAqB5G,OAAO,CAACpE,YAA7C,CADI;AAEnB2F,MAAAA,QAAQ,EAAEA;AAFS,KAAD,EAGjB4E,aAAa,EAHI;AAvBe,GAAD,CAHuC,CAAvD,EA8BfQ,SAAS,IAAI9H,QAAb,GAAwB,aAAazF,KAAK,CAAC4F,aAAN,CAAoBgG,eAApB,EAAqC;AAC7E/E,IAAAA,SAAS,EAAE3G,IAAI,CAAC0G,OAAO,CAAC1D,MAAT,EAAiBuF,aAAa,IAAI7B,OAAO,CAACvD,mBAA1C,CAD8D;AAE7E+L,IAAAA,KAAK,EAAE;AACLjO,MAAAA,KAAK,EAAEsE,QAAQ,GAAGA,QAAQ,CAAC4J,WAAZ,GAA0B;AADpC,KAFsE;AAK7EC,IAAAA,IAAI,EAAE,cALuE;AAM7E7J,IAAAA,QAAQ,EAAEA,QANmE;AAO7EC,IAAAA,IAAI,EAAE;AAPuE,GAArC,EAQvC,aAAa1F,KAAK,CAAC4F,aAAN,CAAoB8F,cAApB,EAAoC;AAClD7E,IAAAA,SAAS,EAAED,OAAO,CAACtD;AAD+B,GAApC,EAEbO,OAAO,IAAI6J,cAAc,CAACE,MAAf,KAA0B,CAArC,GAAyC,aAAa5N,KAAK,CAAC4F,aAAN,CAAoB,KAApB,EAA2B;AAClFiB,IAAAA,SAAS,EAAED,OAAO,CAAC/C;AAD+D,GAA3B,EAEtD8G,WAFsD,CAAtD,GAEe,IAJF,EAIQ+C,cAAc,CAACE,MAAf,KAA0B,CAA1B,IAA+B,CAAC5G,QAAhC,IAA4C,CAACnD,OAA7C,GAAuD,aAAa7D,KAAK,CAAC4F,aAAN,CAAoB,KAApB,EAA2B;AACrHiB,IAAAA,SAAS,EAAED,OAAO,CAAC1C;AADkG,GAA3B,EAEzF4G,aAFyF,CAApE,GAEJ,IANJ,EAMU4C,cAAc,CAACE,MAAf,GAAwB,CAAxB,GAA4B,aAAa5N,KAAK,CAAC4F,aAAN,CAAoB2E,gBAApB,EAAsCxK,QAAQ,CAAC;AAChH8G,IAAAA,SAAS,EAAED,OAAO,CAAClD;AAD6F,GAAD,EAE9G0J,eAAe,EAF+F,EAE3F5C,YAF2F,CAA9C,EAE9BkD,cAAc,CAACK,GAAf,CAAmB,UAAU5J,MAAV,EAAkB6J,KAAlB,EAAyB;AAC/E,QAAIrE,OAAJ,EAAa;AACX,aAAOsC,WAAW,CAAC;AACjBoC,QAAAA,GAAG,EAAElK,MAAM,CAACkK,GADK;AAEjBG,QAAAA,KAAK,EAAErK,MAAM,CAACqK,KAFG;AAGjBC,QAAAA,QAAQ,EAAEtK,MAAM,CAACqH,OAAP,CAAeuC,GAAf,CAAmB,UAAUwB,OAAV,EAAmBC,MAAnB,EAA2B;AACtD,iBAAOZ,gBAAgB,CAACW,OAAD,EAAUpL,MAAM,CAAC6J,KAAP,GAAewB,MAAzB,CAAvB;AACD,SAFS;AAHO,OAAD,CAAlB;AAOD;;AAED,WAAOZ,gBAAgB,CAACzK,MAAD,EAAS6J,KAAT,CAAvB;AACD,GAZoC,CAF8B,CAAzC,GAcpB,IApBU,CAR0B,CAArC,GA4BU,IA1DK,CAApB;AA2DD,CAvQ+B,CAAhC;AAwQAyB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC3J,YAAY,CAAC4J,SAAb,GAAyB;AAC/D;AACA;AACA;AACA;;AAEA;;;;;;AAMAxJ,EAAAA,YAAY,EAAEnG,SAAS,CAAC4P,IAZuC;;AAc/D;;;;AAIAvJ,EAAAA,aAAa,EAAErG,SAAS,CAAC4P,IAlBsC;;AAoB/D;;;;;;AAMArJ,EAAAA,UAAU,EAAEvG,SAAS,CAAC4P,IA1ByC;;AA4B/D;;;;;;;;;AASAnJ,EAAAA,YAAY,EAAEzG,SAAS,CAAC6P,SAAV,CAAoB,CAAC7P,SAAS,CAAC8P,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CAAD,EAAsC9P,SAAS,CAAC4P,IAAhD,CAApB,CArCiD;;AAuC/D;;;AAGAlJ,EAAAA,SAAS,EAAE1G,SAAS,CAAC+P,MA1C0C;;AA4C/D;;;AAGApJ,EAAAA,OAAO,EAAE3G,SAAS,CAAC+P,MA/C4C;;AAiD/D;;;AAGAnJ,EAAAA,SAAS,EAAE5G,SAAS,CAACgQ,MApD0C;;AAsD/D;;;;;;;AAOAlJ,EAAAA,WAAW,EAAE9G,SAAS,CAAC4P,IA7DwC;;AA+D/D;;;;AAIA3I,EAAAA,aAAa,EAAEjH,SAAS,CAAC4P,IAnEsC;;AAqE/D;;;;;;AAMAzI,EAAAA,SAAS,EAAEnH,SAAS,CAACgQ,MA3E0C;;AA6E/D;;;;AAIA3I,EAAAA,SAAS,EAAErH,SAAS,CAACiQ,IAjF0C;;AAmF/D;;;;;;AAMA1I,EAAAA,SAAS,EAAEvH,SAAS,CAACgQ,MAzF0C;;AA2F/D;;;;;;AAMAvI,EAAAA,KAAK,EAAEzH,SAAS,CAAC4P,IAjG8C;;AAmG/D;;;;AAIAjI,EAAAA,YAAY,EAAE3H,SAAS,CAACkQ,GAvGuC;;AAyG/D;;;;AAIApI,EAAAA,gBAAgB,EAAE9H,SAAS,CAAC4P,IA7GmC;;AA+G/D;;;;AAIA5H,EAAAA,oBAAoB,EAAEhI,SAAS,CAAC4P,IAnH+B;;AAqH/D;;;;AAIA1H,EAAAA,QAAQ,EAAElI,SAAS,CAAC4P,IAzH2C;;AA2H/D;;;;AAIAxH,EAAAA,sBAAsB,EAAEpI,SAAS,CAAC4P,IA/H6B;;AAiI/D;;;;AAIAtH,EAAAA,eAAe,EAAEtI,SAAS,CAAC4P,IArIoC;;AAuI/D;;;;AAIApH,EAAAA,aAAa,EAAExI,SAAS,CAAC4P,IA3IsC;;AA6I/D;;;;;;;AAOAnH,EAAAA,aAAa,EAAEzI,SAAS,CAACmQ,IApJsC;;AAsJ/D;;;;AAIAxH,EAAAA,qBAAqB,EAAE3I,SAAS,CAAC4P,IA1J8B;;AA4J/D;;;;AAIA/G,EAAAA,cAAc,EAAE7I,SAAS,CAAC6P,SAAV,CAAoB,CAAC7P,SAAS,CAAC8P,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B9P,SAAS,CAAC4P,IAAtC,CAApB,CAhK+C;;AAkK/D;;;;AAIA7I,EAAAA,QAAQ,EAAE/G,SAAS,CAAC4P,IAtK2C;;AAwK/D;;;;AAIA3O,EAAAA,SAAS,EAAEjB,SAAS,CAAC4P,IA5K0C;;AA8K/D;;;;;;;AAOA3G,EAAAA,gBAAgB,EAAEjJ,SAAS,CAACmQ,IArLmC;;AAuL/D;;;;;;AAMA/G,EAAAA,iBAAiB,EAAEpJ,SAAS,CAACmQ,IA7LkC;;AA+L/D;;;;;;;;AAQA7G,EAAAA,cAAc,EAAEtJ,SAAS,CAACmQ,IAvMqC;;AAyM/D;;;;;;;;AAQA1G,EAAAA,iBAAiB,EAAEzJ,SAAS,CAACmQ,IAjNkC;;AAmN/D;;;;;;;AAOAzG,EAAAA,OAAO,EAAE1J,SAAS,CAACmQ,IA1N4C;;AA4N/D;;;;;AAKAvG,EAAAA,iBAAiB,EAAE5J,SAAS,CAAC4P,IAjOkC;;AAmO/D;;;;AAIA9F,EAAAA,EAAE,EAAE9J,SAAS,CAACgQ,MAvOiD;;AAyO/D;;;;AAIAhG,EAAAA,kBAAkB,EAAEhK,SAAS,CAAC4P,IA7OiC;;AA+O/D;;;AAGA1F,EAAAA,UAAU,EAAElK,SAAS,CAACgQ,MAlPyC;;AAoP/D;;;;;AAKA5F,EAAAA,SAAS,EAAEpK,SAAS,CAACoQ,MAzP0C;;AA2P/D;;;;AAIA9F,EAAAA,gBAAgB,EAAEtK,SAAS,CAACqQ,WA/PmC;;AAiQ/D;;;AAGA9F,EAAAA,YAAY,EAAEvK,SAAS,CAAC+P,MApQuC;;AAsQ/D;;;;AAIAnM,EAAAA,OAAO,EAAE5D,SAAS,CAAC4P,IA1Q4C;;AA4Q/D;;;;;;AAMAlF,EAAAA,WAAW,EAAE1K,SAAS,CAACiQ,IAlRwC;;AAoR/D;;;;AAIArI,EAAAA,QAAQ,EAAE5H,SAAS,CAAC4P,IAxR2C;;AA0R/D;;;;;;AAMA/E,EAAAA,aAAa,EAAE7K,SAAS,CAACiQ,IAhSsC;;AAkS/D;;;;;;;AAOAnF,EAAAA,QAAQ,EAAE9K,SAAS,CAACmQ,IAzS2C;;AA2S/D;;;;;;;AAOApF,EAAAA,OAAO,EAAE/K,SAAS,CAACmQ,IAlT4C;;AAoT/D;;;;;;;AAOAnF,EAAAA,iBAAiB,EAAEhL,SAAS,CAACmQ,IA3TkC;;AA6T/D;;;;;;;AAOAlF,EAAAA,aAAa,EAAEjL,SAAS,CAACmQ,IApUsC;;AAsU/D;;;;;;AAMAjF,EAAAA,MAAM,EAAElL,SAAS,CAACmQ,IA5U6C;;AA8U/D;;;AAGA1K,EAAAA,IAAI,EAAEzF,SAAS,CAAC4P,IAjV+C;;AAmV/D;;;;AAIAxE,EAAAA,WAAW,EAAEpL,SAAS,CAAC4P,IAvVwC;;AAyV/D;;;;;;AAMAtE,EAAAA,QAAQ,EAAEtL,SAAS,CAACgQ,MA/V2C;;AAiW/D;;;AAGAzE,EAAAA,OAAO,EAAEvL,SAAS,CAACsQ,KAAV,CAAgBC,UApWsC;;AAsW/D;;;;AAIA9E,EAAAA,cAAc,EAAEzL,SAAS,CAACqQ,WA1WqC;;AA4W/D;;;;AAIA1E,EAAAA,eAAe,EAAE3L,SAAS,CAACqQ,WAhXoC;;AAkX/D;;;;AAIAvE,EAAAA,SAAS,EAAE9L,SAAS,CAACiQ,IAtX0C;;AAwX/D;;;;;;AAMAjE,EAAAA,WAAW,EAAEhM,SAAS,CAACmQ,IA9XwC;;AAgY/D;;;;;;AAMAlE,EAAAA,WAAW,EAAEjM,SAAS,CAACmQ,IAAV,CAAeI,UAtYmC;;AAwY/D;;;;;;;;AAQApE,EAAAA,YAAY,EAAEnM,SAAS,CAACmQ,IAhZuC;;AAkZ/D;;;;;;;AAOA/D,EAAAA,UAAU,EAAEpM,SAAS,CAACmQ,IAzZyC;;AA2Z/D;;;;;AAKA7D,EAAAA,aAAa,EAAEtM,SAAS,CAAC4P,IAhasC;;AAka/D;;;;AAIApD,EAAAA,IAAI,EAAExM,SAAS,CAAC8P,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,CAAhB,CAtayD;;AAwa/D;;;;;;AAMApD,EAAAA,KAAK,EAAE1M,SAAS,CAACkQ;AA9a8C,CAAjE,GA+aI,KAAK,CA/aT;AAgbA,eAAehQ,UAAU,CAACU,MAAD,EAAS;AAChC4P,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZzK,YAFY,CAAf","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      },\n\n      /* Avoid double tap issue on iOS */\n      '@media (pointer: fine)': {\n        '&:hover $clearIndicatorDirty': {\n          visibility: 'visible'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4\n      },\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '2px 4px 3px'\n        },\n        '& $input:first-child': {\n          padding: '1px 0 4px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '7.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        '& $input': {\n          padding: '2.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '7px 4px'\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '2.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2\n    },\n\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'auto',\n      margin: '4px 0'\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0',\n      maxHeight: '40vh',\n      overflow: 'auto'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0,\n      '& $option': {\n        paddingLeft: 24\n      }\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnBlur = props.clearOnBlur,\n      clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$getLimitTagsTe = props.getLimitTagsText,\n      getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {\n    return \"+\".concat(more);\n  } : _props$getLimitTagsTe,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (option) {\n    var _option$label;\n\n    return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      _props$handleHomeEndK = props.handleHomeEndKeys,\n      handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$limitTags = props.limitTags,\n      limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onHighlightChange = props.onHighlightChange,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      options = props.options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  })),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    var more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: params.key\n    }, /*#__PURE__*/React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n\n  var defaultRenderOption = function defaultRenderOption(props2, option) {\n    return /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n  };\n\n  var renderOption = renderOptionProp || defaultRenderOption;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    });\n  };\n\n  var hasClearIcon = !disableClearable && !disabled;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the input's text will be cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   * @default <CloseIcon fontSize=\"small\" />\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   * @default false\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}